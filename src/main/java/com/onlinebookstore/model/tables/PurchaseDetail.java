/*
 * This file is generated by jOOQ.
 */
package com.onlinebookstore.model.tables;


import com.onlinebookstore.model.Keys;
import com.onlinebookstore.model.Onlinebookstore;
import com.onlinebookstore.model.tables.records.PurchaseDetailRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PurchaseDetail extends TableImpl<PurchaseDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>onlinebookstore.purchase_detail</code>
     */
    public static final PurchaseDetail PURCHASE_DETAIL = new PurchaseDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchaseDetailRecord> getRecordType() {
        return PurchaseDetailRecord.class;
    }

    /**
     * The column <code>onlinebookstore.purchase_detail.price</code>.
     */
    public final TableField<PurchaseDetailRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>onlinebookstore.purchase_detail.quanitity</code>.
     */
    public final TableField<PurchaseDetailRecord, Integer> QUANITITY = createField(DSL.name("quanitity"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>onlinebookstore.purchase_detail.book_id</code>.
     */
    public final TableField<PurchaseDetailRecord, Integer> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>onlinebookstore.purchase_detail.purchase_history_id</code>.
     */
    public final TableField<PurchaseDetailRecord, String> PURCHASE_HISTORY_ID = createField(DSL.name("purchase_history_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private PurchaseDetail(Name alias, Table<PurchaseDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private PurchaseDetail(Name alias, Table<PurchaseDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>onlinebookstore.purchase_detail</code> table reference
     */
    public PurchaseDetail(String alias) {
        this(DSL.name(alias), PURCHASE_DETAIL);
    }

    /**
     * Create an aliased <code>onlinebookstore.purchase_detail</code> table reference
     */
    public PurchaseDetail(Name alias) {
        this(alias, PURCHASE_DETAIL);
    }

    /**
     * Create a <code>onlinebookstore.purchase_detail</code> table reference
     */
    public PurchaseDetail() {
        this(DSL.name("purchase_detail"), null);
    }

    public <O extends Record> PurchaseDetail(Table<O> child, ForeignKey<O, PurchaseDetailRecord> key) {
        super(child, key, PURCHASE_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return Onlinebookstore.ONLINEBOOKSTORE;
    }

    @Override
    public UniqueKey<PurchaseDetailRecord> getPrimaryKey() {
        return Keys.KEY_PURCHASE_DETAIL_PRIMARY;
    }

    @Override
    public List<UniqueKey<PurchaseDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<PurchaseDetailRecord>>asList(Keys.KEY_PURCHASE_DETAIL_PRIMARY, Keys.KEY_PURCHASE_DETAIL_UK_363HI7OSOC0DY0HSN7D443XWG);
    }

    @Override
    public List<ForeignKey<PurchaseDetailRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PurchaseDetailRecord, ?>>asList(Keys.FK1D4RVJV5V7SG625WM4X326JH8, Keys.FKNKDDAJVP78N4H156EP0HKAHMS);
    }

    private transient Book _book;
    private transient PurchaseHistory _purchaseHistory;

    public Book book() {
        if (_book == null)
            _book = new Book(this, Keys.FK1D4RVJV5V7SG625WM4X326JH8);

        return _book;
    }

    public PurchaseHistory purchaseHistory() {
        if (_purchaseHistory == null)
            _purchaseHistory = new PurchaseHistory(this, Keys.FKNKDDAJVP78N4H156EP0HKAHMS);

        return _purchaseHistory;
    }

    @Override
    public PurchaseDetail as(String alias) {
        return new PurchaseDetail(DSL.name(alias), this);
    }

    @Override
    public PurchaseDetail as(Name alias) {
        return new PurchaseDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchaseDetail rename(String name) {
        return new PurchaseDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchaseDetail rename(Name name) {
        return new PurchaseDetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Double, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
