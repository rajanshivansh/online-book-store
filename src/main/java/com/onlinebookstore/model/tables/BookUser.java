/*
 * This file is generated by jOOQ.
 */
package com.onlinebookstore.model.tables;


import com.onlinebookstore.model.Keys;
import com.onlinebookstore.model.Onlinebookstore;
import com.onlinebookstore.model.tables.records.BookUserRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookUser extends TableImpl<BookUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>onlinebookstore.book_user</code>
     */
    public static final BookUser BOOK_USER = new BookUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookUserRecord> getRecordType() {
        return BookUserRecord.class;
    }

    /**
     * The column <code>onlinebookstore.book_user.customer_id</code>.
     */
    public final TableField<BookUserRecord, String> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>onlinebookstore.book_user.book_id</code>.
     */
    public final TableField<BookUserRecord, Integer> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private BookUser(Name alias, Table<BookUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookUser(Name alias, Table<BookUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>onlinebookstore.book_user</code> table reference
     */
    public BookUser(String alias) {
        this(DSL.name(alias), BOOK_USER);
    }

    /**
     * Create an aliased <code>onlinebookstore.book_user</code> table reference
     */
    public BookUser(Name alias) {
        this(alias, BOOK_USER);
    }

    /**
     * Create a <code>onlinebookstore.book_user</code> table reference
     */
    public BookUser() {
        this(DSL.name("book_user"), null);
    }

    public <O extends Record> BookUser(Table<O> child, ForeignKey<O, BookUserRecord> key) {
        super(child, key, BOOK_USER);
    }

    @Override
    public Schema getSchema() {
        return Onlinebookstore.ONLINEBOOKSTORE;
    }

    @Override
    public UniqueKey<BookUserRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<BookUserRecord>> getKeys() {
        return Arrays.<UniqueKey<BookUserRecord>>asList(Keys.KEY_BOOK_USER_PRIMARY);
    }

    @Override
    public List<ForeignKey<BookUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BookUserRecord, ?>>asList(Keys.FK1WAA89OEWKQQU3NBJB419I4TG, Keys.FKD5NHQ3RDFGY9KOEWDEX7BM7Q1);
    }

    private transient Customer _customer;
    private transient Book _book;

    public Customer customer() {
        if (_customer == null)
            _customer = new Customer(this, Keys.FK1WAA89OEWKQQU3NBJB419I4TG);

        return _customer;
    }

    public Book book() {
        if (_book == null)
            _book = new Book(this, Keys.FKD5NHQ3RDFGY9KOEWDEX7BM7Q1);

        return _book;
    }

    @Override
    public BookUser as(String alias) {
        return new BookUser(DSL.name(alias), this);
    }

    @Override
    public BookUser as(Name alias) {
        return new BookUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookUser rename(String name) {
        return new BookUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookUser rename(Name name) {
        return new BookUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
