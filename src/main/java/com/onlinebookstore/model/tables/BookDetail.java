/*
 * This file is generated by jOOQ.
 */
package com.onlinebookstore.model.tables;


import com.onlinebookstore.model.Keys;
import com.onlinebookstore.model.Onlinebookstore;
import com.onlinebookstore.model.tables.records.BookDetailRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookDetail extends TableImpl<BookDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>onlinebookstore.book_detail</code>
     */
    public static final BookDetail BOOK_DETAIL = new BookDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookDetailRecord> getRecordType() {
        return BookDetailRecord.class;
    }

    /**
     * The column <code>onlinebookstore.book_detail.id</code>.
     */
    public final TableField<BookDetailRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>onlinebookstore.book_detail.detail</code>.
     */
    public final TableField<BookDetailRecord, String> DETAIL = createField(DSL.name("detail"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>onlinebookstore.book_detail.sold</code>.
     */
    public final TableField<BookDetailRecord, Integer> SOLD = createField(DSL.name("sold"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>onlinebookstore.book_detail.type</code>.
     */
    public final TableField<BookDetailRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255), this, "");

    private BookDetail(Name alias, Table<BookDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookDetail(Name alias, Table<BookDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>onlinebookstore.book_detail</code> table reference
     */
    public BookDetail(String alias) {
        this(DSL.name(alias), BOOK_DETAIL);
    }

    /**
     * Create an aliased <code>onlinebookstore.book_detail</code> table reference
     */
    public BookDetail(Name alias) {
        this(alias, BOOK_DETAIL);
    }

    /**
     * Create a <code>onlinebookstore.book_detail</code> table reference
     */
    public BookDetail() {
        this(DSL.name("book_detail"), null);
    }

    public <O extends Record> BookDetail(Table<O> child, ForeignKey<O, BookDetailRecord> key) {
        super(child, key, BOOK_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return Onlinebookstore.ONLINEBOOKSTORE;
    }

    @Override
    public Identity<BookDetailRecord, Integer> getIdentity() {
        return (Identity<BookDetailRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookDetailRecord> getPrimaryKey() {
        return Keys.KEY_BOOK_DETAIL_PRIMARY;
    }

    @Override
    public List<UniqueKey<BookDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<BookDetailRecord>>asList(Keys.KEY_BOOK_DETAIL_PRIMARY);
    }

    @Override
    public BookDetail as(String alias) {
        return new BookDetail(DSL.name(alias), this);
    }

    @Override
    public BookDetail as(Name alias) {
        return new BookDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookDetail rename(String name) {
        return new BookDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookDetail rename(Name name) {
        return new BookDetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
