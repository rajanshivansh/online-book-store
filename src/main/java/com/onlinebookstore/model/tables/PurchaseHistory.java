/*
 * This file is generated by jOOQ.
 */
package com.onlinebookstore.model.tables;


import com.onlinebookstore.model.Keys;
import com.onlinebookstore.model.Onlinebookstore;
import com.onlinebookstore.model.tables.records.PurchaseHistoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PurchaseHistory extends TableImpl<PurchaseHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>onlinebookstore.purchase_history</code>
     */
    public static final PurchaseHistory PURCHASE_HISTORY = new PurchaseHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchaseHistoryRecord> getRecordType() {
        return PurchaseHistoryRecord.class;
    }

    /**
     * The column <code>onlinebookstore.purchase_history.id</code>.
     */
    public final TableField<PurchaseHistoryRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>onlinebookstore.purchase_history.date</code>.
     */
    public final TableField<PurchaseHistoryRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>onlinebookstore.purchase_history.customer_id</code>.
     */
    public final TableField<PurchaseHistoryRecord, String> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.VARCHAR(255), this, "");

    private PurchaseHistory(Name alias, Table<PurchaseHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private PurchaseHistory(Name alias, Table<PurchaseHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>onlinebookstore.purchase_history</code> table reference
     */
    public PurchaseHistory(String alias) {
        this(DSL.name(alias), PURCHASE_HISTORY);
    }

    /**
     * Create an aliased <code>onlinebookstore.purchase_history</code> table reference
     */
    public PurchaseHistory(Name alias) {
        this(alias, PURCHASE_HISTORY);
    }

    /**
     * Create a <code>onlinebookstore.purchase_history</code> table reference
     */
    public PurchaseHistory() {
        this(DSL.name("purchase_history"), null);
    }

    public <O extends Record> PurchaseHistory(Table<O> child, ForeignKey<O, PurchaseHistoryRecord> key) {
        super(child, key, PURCHASE_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return Onlinebookstore.ONLINEBOOKSTORE;
    }

    @Override
    public UniqueKey<PurchaseHistoryRecord> getPrimaryKey() {
        return Keys.KEY_PURCHASE_HISTORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<PurchaseHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<PurchaseHistoryRecord>>asList(Keys.KEY_PURCHASE_HISTORY_PRIMARY);
    }

    @Override
    public List<ForeignKey<PurchaseHistoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PurchaseHistoryRecord, ?>>asList(Keys.FKMPH04F5Q5B8VV86LF04C3VEPB);
    }

    private transient Customer _customer;

    public Customer customer() {
        if (_customer == null)
            _customer = new Customer(this, Keys.FKMPH04F5Q5B8VV86LF04C3VEPB);

        return _customer;
    }

    @Override
    public PurchaseHistory as(String alias) {
        return new PurchaseHistory(DSL.name(alias), this);
    }

    @Override
    public PurchaseHistory as(Name alias) {
        return new PurchaseHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchaseHistory rename(String name) {
        return new PurchaseHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PurchaseHistory rename(Name name) {
        return new PurchaseHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, LocalDateTime, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
