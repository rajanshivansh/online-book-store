/*
 * This file is generated by jOOQ.
 */
package com.onlinebookstore.model.tables.records;


import com.onlinebookstore.model.tables.BookDetail;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookDetailRecord extends UpdatableRecordImpl<BookDetailRecord> implements Record4<Integer, String, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>onlinebookstore.book_detail.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>onlinebookstore.book_detail.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>onlinebookstore.book_detail.detail</code>.
     */
    public void setDetail(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>onlinebookstore.book_detail.detail</code>.
     */
    public String getDetail() {
        return (String) get(1);
    }

    /**
     * Setter for <code>onlinebookstore.book_detail.sold</code>.
     */
    public void setSold(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>onlinebookstore.book_detail.sold</code>.
     */
    public Integer getSold() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>onlinebookstore.book_detail.type</code>.
     */
    public void setType(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>onlinebookstore.book_detail.type</code>.
     */
    public String getType() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Integer, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return BookDetail.BOOK_DETAIL.ID;
    }

    @Override
    public Field<String> field2() {
        return BookDetail.BOOK_DETAIL.DETAIL;
    }

    @Override
    public Field<Integer> field3() {
        return BookDetail.BOOK_DETAIL.SOLD;
    }

    @Override
    public Field<String> field4() {
        return BookDetail.BOOK_DETAIL.TYPE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getDetail();
    }

    @Override
    public Integer component3() {
        return getSold();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getDetail();
    }

    @Override
    public Integer value3() {
        return getSold();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public BookDetailRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public BookDetailRecord value2(String value) {
        setDetail(value);
        return this;
    }

    @Override
    public BookDetailRecord value3(Integer value) {
        setSold(value);
        return this;
    }

    @Override
    public BookDetailRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public BookDetailRecord values(Integer value1, String value2, Integer value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookDetailRecord
     */
    public BookDetailRecord() {
        super(BookDetail.BOOK_DETAIL);
    }

    /**
     * Create a detached, initialised BookDetailRecord
     */
    public BookDetailRecord(Integer id, String detail, Integer sold, String type) {
        super(BookDetail.BOOK_DETAIL);

        setId(id);
        setDetail(detail);
        setSold(sold);
        setType(type);
    }
}
