/*
 * This file is generated by jOOQ.
 */
package com.onlinebookstore.model.tables.records;


import com.onlinebookstore.model.tables.BookUser;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookUserRecord extends UpdatableRecordImpl<BookUserRecord> implements Record2<String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>onlinebookstore.book_user.customer_id</code>.
     */
    public void setCustomerId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>onlinebookstore.book_user.customer_id</code>.
     */
    public String getCustomerId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>onlinebookstore.book_user.book_id</code>.
     */
    public void setBookId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>onlinebookstore.book_user.book_id</code>.
     */
    public Integer getBookId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return BookUser.BOOK_USER.CUSTOMER_ID;
    }

    @Override
    public Field<Integer> field2() {
        return BookUser.BOOK_USER.BOOK_ID;
    }

    @Override
    public String component1() {
        return getCustomerId();
    }

    @Override
    public Integer component2() {
        return getBookId();
    }

    @Override
    public String value1() {
        return getCustomerId();
    }

    @Override
    public Integer value2() {
        return getBookId();
    }

    @Override
    public BookUserRecord value1(String value) {
        setCustomerId(value);
        return this;
    }

    @Override
    public BookUserRecord value2(Integer value) {
        setBookId(value);
        return this;
    }

    @Override
    public BookUserRecord values(String value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookUserRecord
     */
    public BookUserRecord() {
        super(BookUser.BOOK_USER);
    }

    /**
     * Create a detached, initialised BookUserRecord
     */
    public BookUserRecord(String customerId, Integer bookId) {
        super(BookUser.BOOK_USER);

        setCustomerId(customerId);
        setBookId(bookId);
    }
}
