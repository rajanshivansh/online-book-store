/*
 * This file is generated by jOOQ.
 */
package com.onlinebookstore.model.tables;


import com.onlinebookstore.model.Keys;
import com.onlinebookstore.model.Onlinebookstore;
import com.onlinebookstore.model.tables.records.ShoppingCartRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShoppingCart extends TableImpl<ShoppingCartRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>onlinebookstore.shopping_cart</code>
     */
    public static final ShoppingCart SHOPPING_CART = new ShoppingCart();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShoppingCartRecord> getRecordType() {
        return ShoppingCartRecord.class;
    }

    /**
     * The column <code>onlinebookstore.shopping_cart.count</code>.
     */
    public final TableField<ShoppingCartRecord, Integer> COUNT = createField(DSL.name("count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>onlinebookstore.shopping_cart.customer_id</code>.
     */
    public final TableField<ShoppingCartRecord, String> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>onlinebookstore.shopping_cart.book_id</code>.
     */
    public final TableField<ShoppingCartRecord, Integer> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private ShoppingCart(Name alias, Table<ShoppingCartRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShoppingCart(Name alias, Table<ShoppingCartRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>onlinebookstore.shopping_cart</code> table reference
     */
    public ShoppingCart(String alias) {
        this(DSL.name(alias), SHOPPING_CART);
    }

    /**
     * Create an aliased <code>onlinebookstore.shopping_cart</code> table reference
     */
    public ShoppingCart(Name alias) {
        this(alias, SHOPPING_CART);
    }

    /**
     * Create a <code>onlinebookstore.shopping_cart</code> table reference
     */
    public ShoppingCart() {
        this(DSL.name("shopping_cart"), null);
    }

    public <O extends Record> ShoppingCart(Table<O> child, ForeignKey<O, ShoppingCartRecord> key) {
        super(child, key, SHOPPING_CART);
    }

    @Override
    public Schema getSchema() {
        return Onlinebookstore.ONLINEBOOKSTORE;
    }

    @Override
    public UniqueKey<ShoppingCartRecord> getPrimaryKey() {
        return Keys.KEY_SHOPPING_CART_PRIMARY;
    }

    @Override
    public List<UniqueKey<ShoppingCartRecord>> getKeys() {
        return Arrays.<UniqueKey<ShoppingCartRecord>>asList(Keys.KEY_SHOPPING_CART_PRIMARY);
    }

    @Override
    public List<ForeignKey<ShoppingCartRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ShoppingCartRecord, ?>>asList(Keys.FKH7DB6PDGS2OL2T6K73WN3XJ75, Keys.FK1SXGWV5NVEK5HCV0OR8302XGE);
    }

    private transient Customer _customer;
    private transient Book _book;

    public Customer customer() {
        if (_customer == null)
            _customer = new Customer(this, Keys.FKH7DB6PDGS2OL2T6K73WN3XJ75);

        return _customer;
    }

    public Book book() {
        if (_book == null)
            _book = new Book(this, Keys.FK1SXGWV5NVEK5HCV0OR8302XGE);

        return _book;
    }

    @Override
    public ShoppingCart as(String alias) {
        return new ShoppingCart(DSL.name(alias), this);
    }

    @Override
    public ShoppingCart as(Name alias) {
        return new ShoppingCart(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShoppingCart rename(String name) {
        return new ShoppingCart(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShoppingCart rename(Name name) {
        return new ShoppingCart(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
